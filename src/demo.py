"""
Script de demostraci√≥n del sistema de biblioteca
Muestra el flujo completo de operaciones
"""
import sys
from pathlib import Path

# Agregar el directorio src al path
sys.path.insert(0, str(Path(__file__).parent))

from controller.libro_controller import LibroController
from controller.socio_controller import SocioController
from controller.prestamo_controller import PrestamoController
from dal.database_manager import DatabaseManager


def separador(titulo=""):
    """Imprimir separador visual"""
    if titulo:
        print(f"\n{'='*60}")
        print(f"  {titulo}")
        print(f"{'='*60}\n")
    else:
        print("-" * 60)


def demo():
    """Ejecutar demostraci√≥n completa del sistema"""
    
    print("\n" + "‚ïî"+"‚ïê"*58+"‚ïó")
    print("‚ïë" + " "*5 + "DEMOSTRACI√ìN: SISTEMA DE GESTI√ìN DE BIBLIOTECA" + " "*6 + "‚ïë")
    print("‚ïö"+"‚ïê"*58+"‚ïù")
    
    # Inicializar controladores
    libro_ctrl = LibroController()
    socio_ctrl = SocioController()
    prestamo_ctrl = PrestamoController()
    
    # 1. Verificar Singleton
    separador("1. VERIFICANDO PATR√ìN SINGLETON")
    db1 = DatabaseManager.get_instance()
    db2 = DatabaseManager.get_instance()
    print(f"DatabaseManager 1: ID {id(db1)}")
    print(f"DatabaseManager 2: ID {id(db2)}")
    print(f"¬øSon la misma instancia? {db1 is db2}")
    print("‚úì Patr√≥n Singleton funcionando correctamente")
    
    # 2. Registrar libros
    separador("2. REGISTRANDO LIBROS EN EL CAT√ÅLOGO")
    libros = [
        ("978-3-16-148410-0", "Cien A√±os de Soledad", "Gabriel Garc√≠a M√°rquez", "Literatura", 3),
        ("978-0-7475-3269-9", "Harry Potter y la Piedra Filosofal", "J.K. Rowling", "Fantas√≠a", 5),
        ("978-0-06-112008-4", "1984", "George Orwell", "Distop√≠a", 2),
        ("978-0-14-028329-3", "El Se√±or de los Anillos", "J.R.R. Tolkien", "Fantas√≠a", 4),
    ]
    
    for isbn, titulo, autor, categoria, ejemplares in libros:
        if libro_ctrl.crear_libro(isbn, titulo, autor, categoria, ejemplares):
            print(f"‚úì '{titulo}' - {autor} ({ejemplares} ejemplares)")
    
    # 3. Registrar socios
    separador("3. REGISTRANDO SOCIOS")
    socios_data = [
        ("Juan P√©rez", "juan.perez@email.com", "123-456-789"),
        ("Mar√≠a Gonz√°lez", "maria.gonzalez@email.com", "987-654-321"),
        ("Pedro Ram√≠rez", "pedro.ramirez@email.com", "555-123-456"),
        ("Ana L√≥pez", "ana.lopez@email.com", "444-789-012"),
    ]
    
    socios_ids = []
    for nombre, email, telefono in socios_data:
        id_socio = socio_ctrl.registrar_socio(nombre, email, telefono)
        if id_socio:
            socios_ids.append(id_socio)
            print(f"‚úì {nombre} - ID: {id_socio}")
    
    # 4. Listar libros disponibles
    separador("4. CAT√ÅLOGO DE LIBROS DISPONIBLES")
    libros_disponibles = libro_ctrl.listar_disponibles()
    print(f"Total: {len(libros_disponibles)} t√≠tulos\n")
    print(f"{'ISBN':<20} {'T√≠tulo':<40} {'Disponibles':<12}")
    print("-"*80)
    for libro in libros_disponibles:
        print(f"{libro.isbn:<20} {libro.titulo[:39]:<40} {libro.ejemplares_disponibles:<12}")
    
    # 5. Realizar pr√©stamos
    separador("5. REALIZANDO PR√âSTAMOS")
    prestamos = [
        (socios_ids[0], "978-3-16-148410-0", "Juan P√©rez", "Cien A√±os de Soledad"),
        (socios_ids[1], "978-0-7475-3269-9", "Mar√≠a Gonz√°lez", "Harry Potter"),
        (socios_ids[0], "978-0-06-112008-4", "Juan P√©rez", "1984"),
        (socios_ids[2], "978-0-14-028329-3", "Pedro Ram√≠rez", "El Se√±or de los Anillos"),
    ]
    
    prestamos_realizados = []
    for id_socio, isbn, nombre_socio, titulo_libro in prestamos:
        print(f"\nPr√©stamo: {nombre_socio} ‚Üí {titulo_libro}")
        prestamo = prestamo_ctrl.realizar_prestamo(id_socio, isbn)
        if prestamo:
            prestamos_realizados.append(prestamo.id_prestamo)
    
    # 6. Listar pr√©stamos activos
    separador("6. PR√âSTAMOS ACTIVOS")
    prestamos_activos = prestamo_ctrl.listar_prestamos_activos()
    print(f"Total: {len(prestamos_activos)} pr√©stamos activos\n")
    print(f"{'ID':<5} {'Socio':<25} {'Libro':<35} {'Vence':<12}")
    print("-"*85)
    for p in prestamos_activos:
        print(f"{p['id_prestamo']:<5} {p['socio_nombre'][:24]:<25} "
              f"{p['libro_titulo'][:34]:<35} {p['fecha_devolucion_esperada']:<12}")
    
    # 7. Verificar estado de un socio
    separador("7. CONSULTANDO ESTADO DE SOCIO")
    socio = socio_ctrl.buscar_socio(socios_ids[0])
    if socio:
        print(f"Socio: {socio.nombre}")
        print(f"  Libros prestados: {socio.libros_prestados}")
        print(f"  Puede prestar m√°s: {'‚úì S√≠' if socio.puede_realizar_prestamo() else '‚úó No'}")
        print(f"  L√≠mite: {socio.MAX_LIBROS_PERMITIDOS} libros")
    
    # 8. Intentar pr√©stamo que excede el l√≠mite
    separador("8. VALIDACI√ìN: PR√âSTAMO EXCEDE L√çMITE")
    print(f"Intentando que {socio.nombre} preste un tercer libro...")
    prestamo = prestamo_ctrl.realizar_prestamo(socios_ids[0], "978-0-7475-3269-9")
    if not prestamo:
        print("‚úì Validaci√≥n correcta: Se bloque√≥ el pr√©stamo por exceder l√≠mite")
    
    # 9. Registrar una devoluci√≥n
    separador("9. REGISTRANDO DEVOLUCI√ìN")
    if prestamos_realizados:
        print(f"Devolviendo pr√©stamo ID: {prestamos_realizados[0]}")
        if prestamo_ctrl.registrar_devolucion(prestamos_realizados[0]):
            print("\nVerificando estado actualizado del socio...")
            socio_actualizado = socio_ctrl.buscar_socio(socios_ids[0])
            print(f"  Libros prestados ahora: {socio_actualizado.libros_prestados}")
    
    # 10. Resumen final
    separador("10. RESUMEN FINAL DEL SISTEMA")
    total_libros = len(libro_ctrl.listar_todos())
    libros_disponibles = len(libro_ctrl.listar_disponibles())
    total_socios = len(socio_ctrl.listar_todos())
    socios_activos = len(socio_ctrl.listar_activos())
    prestamos_activos = len(prestamo_ctrl.listar_prestamos_activos())
    
    print(f"üìö LIBROS")
    print(f"   Total de t√≠tulos:      {total_libros}")
    print(f"   T√≠tulos disponibles:   {libros_disponibles}")
    print(f"\nüë• SOCIOS")
    print(f"   Total de socios:       {total_socios}")
    print(f"   Socios activos:        {socios_activos}")
    print(f"\nüìñ PR√âSTAMOS")
    print(f"   Pr√©stamos activos:     {prestamos_activos}")
    
    # 11. Verificar arquitectura en capas
    separador("11. ARQUITECTURA EN CAPAS")
    print("‚úì VIEW       ‚Üí Menu (interfaz de usuario)")
    print("‚úì CONTROLLER ‚Üí LibroController, SocioController, PrestamoController")
    print("‚úì SERVICE    ‚Üí LibroService, SocioService, PrestamoService")
    print("‚úì REPOSITORY ‚Üí LibroRepository, SocioRepository, PrestamoRepository")
    print("‚úì DAL        ‚Üí DatabaseManager (Singleton)")
    print("‚úì DATABASE   ‚Üí biblioteca.db (SQLite)")
    
    separador()
    print("\n‚úÖ DEMOSTRACI√ìN COMPLETADA EXITOSAMENTE")
    print("\nPara usar el sistema interactivo, ejecute: python main.py\n")


if __name__ == "__main__":
    demo()

